// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: imserver.proto

#if !defined(GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO) || !GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO
#import "Imserver.pbobjc.h"
#endif

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import <ProtoRPC/ProtoService.h>
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriteable.h>
#import <RxLibrary/GRXWriter.h>
#endif

@class ConversationListRequest;
@class FileUploadRequest;
@class GroupMemberListRequest;
@class HeartbeatRequest;
@class LatestConversationMessageRequest;
@class LoginRequest;
@class LogoutRequest;
@class Message;
@class MessageByIdRequest;
@class MuteConversationRequest;
@class RealtimeMessageRequest;
@class RemoveConversationRequest;
@class Response;
@class SendMessageRequest;
@class StickyConversationRequest;
@class SyncConversationDateMessageRequest;
@class SyncConversationMessageRequest;
@class SyncConversationUpdateMessageRequest;
@class SyncDateMessageRequest;
@class SyncMessageRequest;
@class SyncUpdateMessageRequest;
@class UserBadgeRequest;

#if !defined(GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO) || !GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO
#endif

@class GRPCUnaryProtoCall;
@class GRPCStreamingProtoCall;
@class GRPCCallOptions;
@protocol GRPCProtoResponseHandler;
@class GRPCProtoCall;


NS_ASSUME_NONNULL_BEGIN

@protocol TimMessageService2 <NSObject>

#pragma mark login(LoginRequest) returns (Response)

/**
 * *
 * 客户端登录
 * 登录成功后返回LoggedUser
 * 后续请求Metadata需传入session-id
 */
- (GRPCUnaryProtoCall *)loginWithMessage:(LoginRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark logout(LogoutRequest) returns (Response)

/**
 * *
 * 客户端登出
 */
- (GRPCUnaryProtoCall *)logoutWithMessage:(LogoutRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark sendMessage(SendMessageRequest) returns (Response)

/**
 * *
 * 上行发送消息
 * 接收客户端发送的消息并向下投递
 * 投递成功后返回投递的Message信息
 */
- (GRPCUnaryProtoCall *)sendMessageWithMessage:(SendMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark heartbeat(HeartbeatRequest) returns (Response)

/**
 * *
 * 发送心跳信息
 */
- (GRPCUnaryProtoCall *)heartbeatWithMessage:(HeartbeatRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark listenRealtimeMessage(RealtimeMessageRequest) returns (stream Message)

/**
 * *
 * 监听下行消息
 * 监听上行投递的消息，并将消息发送给所有在线的用户客户端
 */
- (GRPCUnaryProtoCall *)listenRealtimeMessageWithMessage:(RealtimeMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark setConversationMuteStatus(MuteConversationRequest) returns (Response)

/**
 * /// 会话管理相关服务
 * 
 * *
 * 设置会话消息免打扰
 * 设置成功后下发通知到用户的其它端
 */
- (GRPCUnaryProtoCall *)setConversationMuteStatusWithMessage:(MuteConversationRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark setConversationStickyStatus(StickyConversationRequest) returns (Response)

/**
 * *
 * 设置会话置顶
 * 设置成功后下发通知到用户的其它端
 */
- (GRPCUnaryProtoCall *)setConversationStickyStatusWithMessage:(StickyConversationRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark removeRemoteConversation(RemoveConversationRequest) returns (Response)

/**
 * *
 * 删除服务端会话
 * 设置成功后下发通知到用户的其它端
 */
- (GRPCUnaryProtoCall *)removeRemoteConversationWithMessage:(RemoveConversationRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark getRemoteConversationList(ConversationListRequest) returns (Response)

/**
 * *
 * 获取服务端会话列表
 * 返回当前用户所有会话
 */
- (GRPCUnaryProtoCall *)getRemoteConversationListWithMessage:(ConversationListRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark getLatestConversationMessageList(LatestConversationMessageRequest) returns (Response)

/**
 * *
 * 获取最新消息
 */
- (GRPCUnaryProtoCall *)getLatestConversationMessageListWithMessage:(LatestConversationMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark syncConversationMessageList(SyncConversationMessageRequest) returns (Response)

/**
 * *
 * 根据消息ID同步会话消息
 */
- (GRPCUnaryProtoCall *)syncConversationMessageListWithMessage:(SyncConversationMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark syncConversationUpdateMessageList(SyncConversationUpdateMessageRequest) returns (Response)

/**
 * *
 * 根据消息最后更新时间同步会话消息
 */
- (GRPCUnaryProtoCall *)syncConversationUpdateMessageListWithMessage:(SyncConversationUpdateMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark syncConversationDateMessageList(SyncConversationDateMessageRequest) returns (Response)

/**
 * *
 * 同步最近几天的会话消息
 */
- (GRPCUnaryProtoCall *)syncConversationDateMessageListWithMessage:(SyncConversationDateMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark syncMessageList(SyncMessageRequest) returns (Response)

/**
 * *
 * 根据消息ID同步消息
 */
- (GRPCUnaryProtoCall *)syncMessageListWithMessage:(SyncMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark syncUpdateMessageList(SyncUpdateMessageRequest) returns (Response)

/**
 * *
 * 根据消息最后更新时间同步消息
 */
- (GRPCUnaryProtoCall *)syncUpdateMessageListWithMessage:(SyncUpdateMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark syncDateMessageList(SyncDateMessageRequest) returns (Response)

/**
 * *
 * 同步最近几天的消息
 */
- (GRPCUnaryProtoCall *)syncDateMessageListWithMessage:(SyncDateMessageRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark getMessageById(MessageByIdRequest) returns (Response)

/**
 * *
 * 根据消息ID获取当前消息
 */
- (GRPCUnaryProtoCall *)getMessageByIdWithMessage:(MessageByIdRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark getFileUploadInfo(FileUploadRequest) returns (Response)

/**
 * *
 * 获取文件上传信息
 * 返回文件上传URL等信息
 */
- (GRPCUnaryProtoCall *)getFileUploadInfoWithMessage:(FileUploadRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark getGroupMemberList(GroupMemberListRequest) returns (Response)

/**
 * *
 * 获取指定memberIds群组成员
 */
- (GRPCUnaryProtoCall *)getGroupMemberListWithMessage:(GroupMemberListRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark setUserBadge(UserBadgeRequest) returns (Response)

- (GRPCUnaryProtoCall *)setUserBadgeWithMessage:(UserBadgeRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

@end

/**
 * The methods in this protocol belong to a set of old APIs that have been deprecated. They do not
 * recognize call options provided in the initializer. Using the v2 protocol is recommended.
 */
@protocol TimMessageService <NSObject>

#pragma mark login(LoginRequest) returns (Response)

/**
 * *
 * 客户端登录
 * 登录成功后返回LoggedUser
 * 后续请求Metadata需传入session-id
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)loginWithRequest:(LoginRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 客户端登录
 * 登录成功后返回LoggedUser
 * 后续请求Metadata需传入session-id
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTologinWithRequest:(LoginRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark logout(LogoutRequest) returns (Response)

/**
 * *
 * 客户端登出
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)logoutWithRequest:(LogoutRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 客户端登出
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTologoutWithRequest:(LogoutRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark sendMessage(SendMessageRequest) returns (Response)

/**
 * *
 * 上行发送消息
 * 接收客户端发送的消息并向下投递
 * 投递成功后返回投递的Message信息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)sendMessageWithRequest:(SendMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 上行发送消息
 * 接收客户端发送的消息并向下投递
 * 投递成功后返回投递的Message信息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosendMessageWithRequest:(SendMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark heartbeat(HeartbeatRequest) returns (Response)

/**
 * *
 * 发送心跳信息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)heartbeatWithRequest:(HeartbeatRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 发送心跳信息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToheartbeatWithRequest:(HeartbeatRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark listenRealtimeMessage(RealtimeMessageRequest) returns (stream Message)

/**
 * *
 * 监听下行消息
 * 监听上行投递的消息，并将消息发送给所有在线的用户客户端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)listenRealtimeMessageWithRequest:(RealtimeMessageRequest *)request eventHandler:(void(^)(BOOL done, Message *_Nullable response, NSError *_Nullable error))eventHandler;

/**
 * *
 * 监听下行消息
 * 监听上行投递的消息，并将消息发送给所有在线的用户客户端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTolistenRealtimeMessageWithRequest:(RealtimeMessageRequest *)request eventHandler:(void(^)(BOOL done, Message *_Nullable response, NSError *_Nullable error))eventHandler;


#pragma mark setConversationMuteStatus(MuteConversationRequest) returns (Response)

/**
 * /// 会话管理相关服务
 * 
 * *
 * 设置会话消息免打扰
 * 设置成功后下发通知到用户的其它端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)setConversationMuteStatusWithRequest:(MuteConversationRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * /// 会话管理相关服务
 * 
 * *
 * 设置会话消息免打扰
 * 设置成功后下发通知到用户的其它端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosetConversationMuteStatusWithRequest:(MuteConversationRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark setConversationStickyStatus(StickyConversationRequest) returns (Response)

/**
 * *
 * 设置会话置顶
 * 设置成功后下发通知到用户的其它端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)setConversationStickyStatusWithRequest:(StickyConversationRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 设置会话置顶
 * 设置成功后下发通知到用户的其它端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosetConversationStickyStatusWithRequest:(StickyConversationRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark removeRemoteConversation(RemoveConversationRequest) returns (Response)

/**
 * *
 * 删除服务端会话
 * 设置成功后下发通知到用户的其它端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)removeRemoteConversationWithRequest:(RemoveConversationRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 删除服务端会话
 * 设置成功后下发通知到用户的其它端
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToremoveRemoteConversationWithRequest:(RemoveConversationRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark getRemoteConversationList(ConversationListRequest) returns (Response)

/**
 * *
 * 获取服务端会话列表
 * 返回当前用户所有会话
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getRemoteConversationListWithRequest:(ConversationListRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 获取服务端会话列表
 * 返回当前用户所有会话
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTogetRemoteConversationListWithRequest:(ConversationListRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark getLatestConversationMessageList(LatestConversationMessageRequest) returns (Response)

/**
 * *
 * 获取最新消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getLatestConversationMessageListWithRequest:(LatestConversationMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 获取最新消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTogetLatestConversationMessageListWithRequest:(LatestConversationMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark syncConversationMessageList(SyncConversationMessageRequest) returns (Response)

/**
 * *
 * 根据消息ID同步会话消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)syncConversationMessageListWithRequest:(SyncConversationMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 根据消息ID同步会话消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosyncConversationMessageListWithRequest:(SyncConversationMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark syncConversationUpdateMessageList(SyncConversationUpdateMessageRequest) returns (Response)

/**
 * *
 * 根据消息最后更新时间同步会话消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)syncConversationUpdateMessageListWithRequest:(SyncConversationUpdateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 根据消息最后更新时间同步会话消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosyncConversationUpdateMessageListWithRequest:(SyncConversationUpdateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark syncConversationDateMessageList(SyncConversationDateMessageRequest) returns (Response)

/**
 * *
 * 同步最近几天的会话消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)syncConversationDateMessageListWithRequest:(SyncConversationDateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 同步最近几天的会话消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosyncConversationDateMessageListWithRequest:(SyncConversationDateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark syncMessageList(SyncMessageRequest) returns (Response)

/**
 * *
 * 根据消息ID同步消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)syncMessageListWithRequest:(SyncMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 根据消息ID同步消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosyncMessageListWithRequest:(SyncMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark syncUpdateMessageList(SyncUpdateMessageRequest) returns (Response)

/**
 * *
 * 根据消息最后更新时间同步消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)syncUpdateMessageListWithRequest:(SyncUpdateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 根据消息最后更新时间同步消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosyncUpdateMessageListWithRequest:(SyncUpdateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark syncDateMessageList(SyncDateMessageRequest) returns (Response)

/**
 * *
 * 同步最近几天的消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)syncDateMessageListWithRequest:(SyncDateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 同步最近几天的消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTosyncDateMessageListWithRequest:(SyncDateMessageRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark getMessageById(MessageByIdRequest) returns (Response)

/**
 * *
 * 根据消息ID获取当前消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getMessageByIdWithRequest:(MessageByIdRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 根据消息ID获取当前消息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTogetMessageByIdWithRequest:(MessageByIdRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark getFileUploadInfo(FileUploadRequest) returns (Response)

/**
 * *
 * 获取文件上传信息
 * 返回文件上传URL等信息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getFileUploadInfoWithRequest:(FileUploadRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 获取文件上传信息
 * 返回文件上传URL等信息
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTogetFileUploadInfoWithRequest:(FileUploadRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark getGroupMemberList(GroupMemberListRequest) returns (Response)

/**
 * *
 * 获取指定memberIds群组成员
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getGroupMemberListWithRequest:(GroupMemberListRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

/**
 * *
 * 获取指定memberIds群组成员
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCTogetGroupMemberListWithRequest:(GroupMemberListRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


#pragma mark setUserBadge(UserBadgeRequest) returns (Response)

- (void)setUserBadgeWithRequest:(UserBadgeRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;

- (GRPCProtoCall *)RPCTosetUserBadgeWithRequest:(UserBadgeRequest *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler;


@end


#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
/**
 * Basic service implementation, over gRPC, that only does
 * marshalling and parsing.
 */
@interface TimMessageService : GRPCProtoService<TimMessageService2, TimMessageService>
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions NS_DESIGNATED_INITIALIZER;
+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions;
// The following methods belong to a set of old APIs that have been deprecated.
- (instancetype)initWithHost:(NSString *)host;
+ (instancetype)serviceWithHost:(NSString *)host;
@end
#endif

NS_ASSUME_NONNULL_END

